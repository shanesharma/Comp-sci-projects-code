// Include the V5 Library
#include "vex.h"
 // Allows for easier use of the VEX Library
using namespace vex;


int Brain_precision = 0, Console_precision = 0;


float myVariable;


event message1 = event();


// "when started" hat block
int whenStarted1() {
 RoboticArm1.setMasteringValues(1884.0,2089.0,1843.0,451.0);
 RoboticArm1.setToolTipOffset(1.05, 0.0, -1.0);
 RoboticArm1.moveToPositionLinear(6.0, -4.0, 2.0);
 RoboticArm1.moveToPositionLinear(6.0, 4.0, 2.0);
 //RoboticArm1.moveToPositionLinear(6.0, 4.0, 2.0);
 wait(1,seconds);
 RoboticArm1.moveToPositionJoint(6, -4, 1.5);




 return 0;
}




// "when EStop pressed" hat block
void onevent_EStop_pressed_0() {
 RoboticArm1.emergencyStop();
}


// Used to find the format string for printing numbers with the
// desired number of decimal places
const char* printToBrain_numberFormat() {
 // look at the current precision setting to find the format string
 switch(Brain_precision){
   case 0:  return "%.0f"; // 0 decimal places (1)
   case 1:  return "%.1f"; // 1 decimal place  (0.1)
   case 2:  return "%.2f"; // 2 decimal places (0.01)
   case 3:  return "%.3f"; // 3 decimal places (0.001)
   default: return "%f"; // use the print system default for everthing else
 }
}


// "when started" hat block
int whenStarted2() {
 Brain.Screen.setFont(mono60);
 Brain_precision = 3;
 while (true) {
   Brain.Screen.clearScreen();
   // Display the X position on row 1
   Brain.Screen.setCursor(1, 1);
   Brain.Screen.print("X: ");
   Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(RoboticArm1.getAxisPosition(xaxis)));
   Brain.Screen.newLine();
   // Display the Y position on row 2
   Brain.Screen.print("Y: ");
   Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(RoboticArm1.getAxisPosition(yaxis)));
   Brain.Screen.newLine();
   // Display the Z position on row 3
   Brain.Screen.print("Z: ");
   Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(RoboticArm1.getAxisPosition(zaxis)));
   wait(0.2, seconds);
 wait(5, msec);
 }
 return 0;
}




int main() {
 // register event handlers
 EStop.pressed(onevent_EStop_pressed_0);


 wait(15, msec);
 // post event registration


 // set default print color to black
 printf("\033[30m");


 // wait for rotation sensor to fully initialize
 wait(30, msec);


 vex::task ws1(whenStarted2);
 whenStarted1();
}
